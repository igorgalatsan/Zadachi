
my_list = [35, 37, 38, 42, 54, 56, 69, 73, 83, 85, 90, 92, 94]

for i in my_list:
    print(i, end="*")

print()

for i in range(0,len(my_list)):
    print(my_list[i], end="$$")

print()

a = 35
st=  "kjdhf"
flag = True
l = [a, st, flag]
s = {a, st, flag}
t = (a, st, flag)


print(t[-1])
print(list(s)[1])
print(l[0])

my_set_1 = {35, 37, 38, 42, 54, 56, 69, 73, 83, 85, 90, 92, 94}
my_set_2 = {35, 37, 38, 42, 54, 56}

result = my_set_1.intersection(my_set_2)
print(result)

# result = my_set_1.difference(my_set_2)
result = my_set_1 - my_set_2
print(result)

# Встречалось ли число раньше

# Во входной строке записана последовательность чисел через пробел. 
# Для каждого числа выведите слово YES (в отдельной строке), 
# если это число ранее встречалось в последовательности или NO, если не встречалось.

# Входные данные
# Вводится список чисел. Все числа списка находятся на одной строке.

# Выходные данные
# no no no yes no yes

def yes_no(some_list: list) -> list:
    some_set = set()
    result_list = []
    for i in some_list:
        if some_set.intersection({i,}):
            result_list.append("Yes")
        else:
            result_list.append("No")
            some_set.add(i)
    
    return result_list

user_input = input('Inpull numbers: ').split()
print(yes_no(user_input))


# Дан список чисел, который может содержать до 100_000 чисел. 
# Определите, сколько в нем встречается различных чисел.


# Даны два списка чисел, которые могут содержать до 100000 чисел каждый. 
# Посчитайте, сколько чисел содержится одновременно как в первом списке, так и во втором.

# 

# Рассмотрим последовательность целых чисел длины N. По ней с шагом 1
# двигается “окно” длины K, то есть сначала в “окне” видно первые K чисел,
# на следующем шаге в “окне” уже будут находиться K чисел, начиная со второго,
# и так далее до конца последовательности. Требуется для каждого положения “окна”
# определить минимум в нём.
# Входные данные
# В первой строке входных данных содержатся два числа N и K 
# (1 ≤  N ≤  150000, 1 ≤ K ≤ 10000, K ≤  N) – длины последовательности и “окна”,
# соответственно. На следующей строке находятся N чисел – сама последовательность.
# Выходные данные
# Выходые данные должны содержать N − K + 1 строк – минимумы для каждого 
# положения “окна”.


##

# 
# Выведите второй по величине элемент в построенном дереве. Гарантируется, что 
# такой найдется.
# Входные данные

# Дана последовательность целых чисел, оканчивающаяся нулем. Сам ноль в 
# последовательность не входит.




text = """
She sells sea shells on the sea shore;
The shells that she sells are sea shells I'm sure.
So if she sells sea shells on the sea shore,
I'm sure that the shells are sea shore shells.
"""
# Во входном файле (вы можете читать данные из файла input.txt) записан текст.
# Словом считается последовательность непробельных символов идущих подряд, 
# слова разделены одним или большим числом пробелов или символами конца строки.

# Определите, сколько различных слов содержится в этом тексте.
